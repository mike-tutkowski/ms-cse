package controller;

import com.fasterxml.jackson.databind.ObjectMapper;

import data.Location;
import data.TaxiQuery;

import schema.TransportType;
import service.Service;

import org.junit.Assert;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

/**
 * This is a handful of unit tests to verify that the API layer is correctly responding to success and failure
 * conditions that can be generated by the business layer. The business layer is mocked out using Mockito.
 */
@RunWith(MockitoJUnitRunner.class)
class TestNyTripData {
    @Mock private Service mockService;
    @InjectMocks private NyTripData nyTripData;

    private final String ERROR_MSG = "Test code: Unable to access the REST service.";
    private final String ZERO_LENGTH_STR = "";

    @BeforeEach
    void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testGetLocationsSuccess() throws Exception {
        List<Location> list = new ArrayList<>();

        list.add(new Location(1, "EWR", "Newark Airport"));
        list.add(new Location(2, "Queens", "Jamaica Bay"));

        when(mockService.getLocations(ZERO_LENGTH_STR)).thenReturn(list);

        ResponseEntity<String> responseEntity = nyTripData.getLocations(ZERO_LENGTH_STR);

        verify(mockService, times(1)).getLocations(ZERO_LENGTH_STR);

        Assert.assertEquals(HttpStatus.OK, responseEntity.getStatusCode());

        String jsonResponse = responseEntity.getBody();
        Location[] returnedArray = getObjectFromJsonString(jsonResponse, Location[].class);
        List<Location> returnedList = Arrays.asList(returnedArray);

        Assert.assertEquals(list, returnedList);
    }

    @Test
    void testGetLocationsFailure() throws Exception {
        int fromLocationId = 100;
        int toLocationId = 200;
        TransportType transportType = TransportType.NONE;

        Exception exception = new Exception(ERROR_MSG);

        doThrow(exception).when(mockService).getTaxiQuery(fromLocationId, toLocationId, transportType);

        ResponseEntity<String> responseEntity = nyTripData.getTaxiQuery(fromLocationId, toLocationId, ZERO_LENGTH_STR);

        verify(mockService, times(1)).getTaxiQuery(fromLocationId, toLocationId, transportType);

        Assert.assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());

        String expectedBody = "{\"error\": \"" + ERROR_MSG + "\"}";

        Assert.assertEquals(expectedBody, responseEntity.getBody());
    }

    @Test
    void testTaxiQuerySuccess() throws Exception {
        int fromLocationId = 100;
        int toLocationId = 200;
        TransportType transportType = TransportType.NONE;

        TaxiQuery taxiQuery = new TaxiQuery(300, 10.50f);
        Optional<TaxiQuery> opt = Optional.of(taxiQuery);

        when(mockService.getTaxiQuery(fromLocationId, toLocationId, transportType)).thenReturn(opt);

        ResponseEntity<String> responseEntity = nyTripData.getTaxiQuery(fromLocationId, toLocationId, ZERO_LENGTH_STR);

        verify(mockService, times(1)).getTaxiQuery(fromLocationId, toLocationId, transportType);

        Assert.assertEquals(HttpStatus.OK, responseEntity.getStatusCode());

        String jsonResponse = responseEntity.getBody();
        TaxiQuery returnedTaxiQuery = getObjectFromJsonString(jsonResponse, TaxiQuery.class);

        Assert.assertEquals(taxiQuery, returnedTaxiQuery);
    }

    @Test
    void testTaxiQueryFailure() throws Exception {
        Exception exception = new Exception(ERROR_MSG);

        doThrow(exception).when(mockService).getLocations(ZERO_LENGTH_STR);

        ResponseEntity<String> responseEntity = nyTripData.getLocations(ZERO_LENGTH_STR);

        verify(mockService, times(1)).getLocations(ZERO_LENGTH_STR);

        Assert.assertEquals(responseEntity.getStatusCode(), HttpStatus.INTERNAL_SERVER_ERROR);

        String expectedBody = "{\"error\": \"" + ERROR_MSG + "\"}";

        Assert.assertEquals(expectedBody, responseEntity.getBody());
    }

    private <T> T getObjectFromJsonString(String json, Class<T> cls) throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        return mapper.readValue(json, cls);
    }
}
